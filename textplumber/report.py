"""Functions to aide reporting - need to document and show example of each."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/93_report.ipynb.

# %% auto 0
__all__ = ['preview_splits', 'preview_label_counts', 'preview_text_field', 'preview_row_text', 'plot_confusion_matrix']

# %% ../nbs/93_report.ipynb 3
import pandas as pd

# %% ../nbs/93_report.ipynb 4
def preview_splits(X_train, y_train, X_test, y_test, label_names):
    print(f"Train: {len(X_train)} samples, {len(set(y_train))} classes")
    train_label_counts = pd.DataFrame(y_train).value_counts().to_frame()
    train_label_counts.insert(0, 'label_name', label_names)
    display(train_label_counts)
    print(f"Test: {len(X_test)} samples, {len(set(y_test))} classes")
    test_label_counts = pd.DataFrame(y_test).value_counts().to_frame()
    test_label_counts.insert(0, 'label_name', label_names)
    display(test_label_counts)

# %% ../nbs/93_report.ipynb 5
def preview_label_counts(df, label_column, label_names):
    summary = pd.DataFrame(df.groupby([label_column])[label_column].count())
    summary.columns = ['count']
    summary.insert(0, 'label_name', label_names)
    display(summary)

# %% ../nbs/93_report.ipynb 6
def preview_text_field(text: str, # Text to preview
					   width: int = 80 # Width to wrap the text to
					   ):
	""" Preview a text field, wrapping the text to 80 characters """
	for line in text.split("\r\n"):
		print(textwrap.fill(line, width=width))

# %% ../nbs/93_report.ipynb 7
def preview_row_text(df: pd.DataFrame, # DataFrame containing the data
					 selected_index: int, # Index of the row to preview 
					 text_column: str = 'text', # column name for text field
					 limit: int = -1 # Limit the length of the text field
					 ):
	""" Preview the text fields of a row in the DataFrame """

	# get row where index is selected_index as a frame - not iloc
	summary = df.loc[selected_index].to_frame().drop(text_column)
	summary.columns = ['Value']
	summary.index.name = 'Attribute'
	display(summary)

	print(f"{text_column}:")
	text = df[text_column].loc[selected_index]
	if limit > 1:
		if len(text) > limit:
			text = text[:limit] + "..."
	preview_text_field(text)

# %% ../nbs/93_report.ipynb 8
def plot_confusion_matrix(y_test, y_predicted, target_classes, target_names):
	# Compute confusion matrix
	cm = confusion_matrix(y_test, y_predicted, labels=target_classes)

	# Compute row and column totals
	row_totals = cm.sum(axis=1)  # Row totals
	col_totals = cm.sum(axis=0)  # Column totals
	overall_total = cm.sum()  # Overall total

	# Compute normalized proportions
	cm_normalized = cm / cm.sum(axis=1, keepdims=True)  # Normalize rows (proportions)

	# Combine counts and proportions into annotations
	annotations = np.empty_like(cm).astype(str)
	for i in range(cm.shape[0]):
		for j in range(cm.shape[1]):
			annotations[i, j] = f"{cm[i, j]}\n({cm_normalized[i, j]:.2f})"

	# Create updated axis labels with totals
	xticklabels_with_totals = [f"{label}\n(Total: {total})" for label, total in zip(target_names, col_totals)]
	yticklabels_with_totals = [f"{label} (Total: {total})" for label, total in zip(target_names, row_totals)]

	# Create heatmap without totals in the matrix
	fig, ax = plt.subplots(figsize=(10, 8))
	sns.heatmap(cm,
				annot=annotations,
				fmt='',
				cmap='Blues',
				xticklabels=xticklabels_with_totals,
				yticklabels=yticklabels_with_totals,
				cbar=True)

	plt.xlabel('Predicted Labels')
	plt.ylabel('Actual Labels')

	plt.show()

